#!/usr/bin/env python
PACKAGE = "curvature_aware_mpcc_pkg"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()



# Add a dummy boolean parameter as a label
gen.add("do_not_edit_1",    str_t,    0, "dummy variable to separate group of parameters",  "High_Level_Path_Planner")
gen.add("V_target", double_t, 0, "target path velocity", 2.0, 0,   4)
gen.add("q_con", double_t, 0, "weight on contouring error", 0.5, 0,   10)
gen.add("q_lag", double_t, 0, "weight on lag error(standard MPCC only)", 0.5, 0,   1)
gen.add("q_u_yaw_rate", double_t, 0, "weight on yaw rate", 0.001, 0,   1)
gen.add("qt_pos_high", double_t, 0, "terminal cost weight on position", 1.0, 0,   20)
gen.add("qt_rot_high", double_t, 0, "terminal cost weight on rotation", 1.0, 0,   20)

# Add a dummy boolean parameter as a label
gen.add("do_not_edit_2",    str_t,    0, "dummy variable to separate group of parameters",  "Low_Level_Motion_tracker")
gen.add("q_v", double_t, 0, "weight on velocity following", 0.1, 0,   10)
gen.add("q_u", double_t, 0, "weight on inputs", 0.01, 0,   1)
gen.add("q_acc", double_t, 0, "weight on longitudinal acceleration", 0.03, 0,   1)
gen.add("q_pos", double_t, 0, "stage cost weight on position", 1.0, 0,   20)
gen.add("q_rot", double_t, 0, "stage cost weight on rotation", 1.0, 0,   20)
gen.add("qt_pos", double_t, 0, "terminal cost weight on position", 5.0, 0,   20)
gen.add("qt_rot", double_t, 0, "terminal cost weight on rotation", 5.0, 0,   20)
gen.add("l_width", double_t, 0, "lane width", 0.6, 0,   3.0)
gen.add("dt", double_t, 0, "solver and controller dt.", 0.1, 0.001,   0.5)
gen.add("save_data",   bool_t,   0, "Save controller output data",  False)
gen.add("data_folder_name",    str_t,    0, "data folder name",  "GP_MPCC_data_recordings")
gen.add("minimal_plotting",   bool_t,   0, "Only plot vehicle position and global path",  False)
gen.add("delay_compensation",   bool_t,   0, "if in the lab it can be useful to compensate for delays in comunication",  False)

'''
solver_choice_enum = gen.enum([ gen.const("Standard_MPCC",int_t, 1, "sets the solver type to the standard MPCC formulation that uses lag and contouring error"),
gen.const("CAMPCC",     int_t, 2, "sets the solver type to Curvature Aware MPCC"),
gen.const("CAMPCC dyn bycicle", int_t, 3, "sets the solver type to CAMPCC with dynamic bycicle model for dynamics")],
"An enum to set size")
# --------------------                                                            these number are: default value, min, max value
gen.add("solver_choice", int_t, 0, "A size parameter which is edited via an enum", 3, 1, 3, edit_method=solver_choice_enum) # was 2,1,2
'''

# drop down menus
Solver_software_choice_enum = gen.enum([
gen.const("ACADOS",int_t, 0, "Using ACADOS solver"),
gen.const("FORCES",int_t, 1, "Using FORCESPRO solver"),
],
"An enum to set the solver software")


MPC_algorithm_choice_enum = gen.enum([
gen.const("MPCC",int_t, 0, "Standard MPCC formulation that uses lag and contouring error"),
gen.const("CAMPCC",int_t, 1, "Standard MPCC formulation that uses lag and contouring error"),
],
"An enum to set MPC formulation type")

dynamic_model_choice_enum = gen.enum([
gen.const("kinematic_bicycle",int_t, 0, "kinematic bicycle model"),
gen.const("dynamic_bicycle",int_t, 1, "dynamic bicycle model"),
],
"An enum to set dynamic model type")



# --------------------                                                            these number are: default value, min, max value
gen.add("Solver_software", int_t, 0, "Solver software choice", 0, 0, 1, edit_method=Solver_software_choice_enum) # was 2,1,2
gen.add("MPC_algorithm", int_t, 0, "MPC formulation", 0, 0, 1, edit_method=MPC_algorithm_choice_enum) # was 2,1,2
gen.add("Dynamic_model", int_t, 0, "Dynamic model", 0, 0, 2, edit_method=dynamic_model_choice_enum)




exit(gen.generate(PACKAGE, "dynamic_reconfigure_pkg", "GUI_mpc_dynamic_reconfigure"))



